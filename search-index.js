var searchIndex={};
searchIndex["regular"] = {"doc":"","i":[[0,"util","regular","",null,null],[3,"FixedBitSet","regular::util","",null,null],[3,"Join","","",null,null],[3,"SetPartitions","","",null,null],[3,"VecSet","","",null,null],[4,"Range","","",null,null],[13,"NonEmpty","","",0,null],[12,"start","regular::util::Range","Start value, inclusive",0,null],[12,"end","","End value, inclusive",0,null],[13,"Empty","regular::util","",0,null],[11,"new","","",1,[[["usize"]],["self"]]],[11,"block_len","","",1,[[["self"]],["usize"]]],[11,"len","","",1,[[["self"]],["usize"]]],[11,"is_empty","","",1,[[["self"]],["bool"]]],[11,"contains","","",1,[[["self"],["usize"]],["bool"]]],[11,"is_subset","","",1,[[["self"]],["bool"]]],[11,"get","","",1,[[["self"],["usize"]],[["option",["bool"]],["bool"]]]],[11,"set","","",1,[[["self"],["usize"]],["bool"]]],[11,"clear","","",1,[[["self"],["usize"]],["bool"]]],[11,"iter","","",1,[[["self"]]]],[11,"new","","",2,[[["r"],["f"],["l"]],["self"]]],[11,"new","","",3,[[]]],[11,"num_partitions","","",3,[[["self"]],["usize"]]],[11,"size","","",3,[[["self"],["usize"]],["usize"]]],[11,"set","","",3,[[["self"],["a"]],["usize"]]],[11,"mark","","",3,[[["self"],["a"]]]],[11,"split","","",3,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"set_iter","","",3,[[["self"],["usize"]],["setpartitioniter"]]],[11,"no_marks","","",3,[[["self"],["usize"]],["bool"]]],[11,"marked_slice","","",3,[[["self"],["usize"]]]],[11,"unmarked_slice","","",3,[[["self"],["usize"]]]],[11,"contains","","",0,[[["sym"],["self"]],["bool"]]],[11,"new","","",4,[[],["self"]]],[11,"from_slice","","",4,[[],["self"]]],[11,"from_slice_unchecked","","",4,[[],["self"]]],[11,"contains","","",4,[[["self"],["a"]],["bool"]]],[11,"retain","","",4,[[["self"],["f"]]]],[11,"clear","","",4,[[["self"]]]],[11,"insert","","",4,[[["a"],["self"]],["bool"]]],[11,"remove","","",4,[[["self"],["a"]],["bool"]]],[11,"intersection","","",4,[[["vecset"],["self"]]]],[11,"difference","","",4,[[["vecset"],["self"]]]],[11,"union","","",4,[[["vecset"],["self"]]]],[11,"symmetric_difference","","",4,[[["vecset"],["self"]]]],[11,"iter","","",4,[[["self"]],["iter"]]],[11,"as_slice","","",4,[[["self"]]]],[8,"Bounded","","",null,null],[18,"MIN","","",5,null],[18,"MAX","","",5,null],[8,"Step","","TODO(replace copied code): This is a copy of the Step…",null,null],[10,"steps_between","","Returns the number of successor steps needed to get from…",6,[[["self"]],[["option",["usize"]],["usize"]]]],[10,"forward","","Returns the value that would be obtained by taking the…",6,[[["self"],["usize"]],["option"]]],[11,"successor","","Returns the successor of `self`.",6,[[["self"]],["self"]]],[11,"successor_saturating","","Returns the successor of `self`.",6,[[["self"]],["self"]]],[11,"successor_unchecked","","Returns the successor of `self` without overflow.",6,[[["self"]],["self"]]],[10,"backward","","Returns the value that would be obtained by taking the…",6,[[["self"],["usize"]],["option"]]],[11,"predecessor","","Returns the predecessor of `self`.",6,[[["self"]],["self"]]],[11,"predecessor_saturating","","Returns the predecessor of `self`.",6,[[["self"]],["self"]]],[11,"predecessor_unchecked","","Returns the predecessor of `self` without underflow.",6,[[["self"]],["self"]]],[8,"StorageInt","","",null,null],[10,"one","","",7,[[],["self"]]],[10,"zero","","",7,[[],["self"]]],[10,"leading_zeros","","",7,[[],["usize"]]],[10,"from_usize","","",7,[[["usize"]],["self"]]],[10,"to_usize","","",7,[[],["usize"]]],[0,"accept","regular","Generalization of the accept/non-accept of regular…",null,null],[8,"Accept","regular::accept","Trait for objects that can decide whether or not a string…",null,null],[16,"Symbol","","The type of symbols in the strings.",8,null],[10,"accept","","Return `true` if the given string is member of the…",8,[[["intoiterator"]],["bool"]]],[8,"IterExt","","Extension to the `Iterator` trait to test whether the…",null,null],[11,"is_accepted","","Return `true` if the string given by this iterator is a…",9,[[["accept"]],["bool"]]],[11,"from","regular::util","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"into_iter","","",4,[[],["i"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[],["self"]]],[11,"from","","",4,[[["vec"]],["self"]]],[11,"extend","","",4,[[["self"],["intoiterator"]]]],[11,"into_iter","","",4,[[]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"clone","","",1,[[["self"]],["fixedbitset"]]],[11,"clone","","",3,[[["self"]],["setpartitions"]]],[11,"clone","","",0,[[["self"]],["range"]]],[11,"clone","","",4,[[["self"]],["vecset"]]],[11,"default","","",4,[[],["self"]]],[11,"cmp","","",4,[[["vecset"],["self"]],["ordering"]]],[11,"eq","","",1,[[["fixedbitset"],["self"]],["bool"]]],[11,"ne","","",1,[[["fixedbitset"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["setpartitions"]],["bool"]]],[11,"ne","","",3,[[["self"],["setpartitions"]],["bool"]]],[11,"eq","","",0,[[["range"],["self"]],["bool"]]],[11,"ne","","",0,[[["range"],["self"]],["bool"]]],[11,"eq","","",4,[[["vecset"],["self"]],["bool"]]],[11,"ne","","",4,[[["vecset"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["vecset"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",4,[[["vecset"],["self"]],["bool"]]],[11,"le","","",4,[[["vecset"],["self"]],["bool"]]],[11,"gt","","",4,[[["vecset"],["self"]],["bool"]]],[11,"ge","","",4,[[["vecset"],["self"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"from_iter","","",4,[[["intoiterator"]],["self"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[18,"MIN","","",5,null],[18,"MAX","","",5,null],[11,"successor","","Returns the successor of `self`.",6,[[["self"]],["self"]]],[11,"successor_saturating","","Returns the successor of `self`.",6,[[["self"]],["self"]]],[11,"successor_unchecked","","Returns the successor of `self` without overflow.",6,[[["self"]],["self"]]],[11,"predecessor","","Returns the predecessor of `self`.",6,[[["self"]],["self"]]],[11,"predecessor_saturating","","Returns the predecessor of `self`.",6,[[["self"]],["self"]]],[11,"predecessor_unchecked","","Returns the predecessor of `self` without underflow.",6,[[["self"]],["self"]]]],"p":[[4,"Range"],[3,"FixedBitSet"],[3,"Join"],[3,"SetPartitions"],[3,"VecSet"],[8,"Bounded"],[8,"Step"],[8,"StorageInt"],[8,"Accept"],[8,"IterExt"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);