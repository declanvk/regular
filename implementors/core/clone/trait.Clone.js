(function() {var implementors = {};
implementors["regular"] = [{"text":"impl Clone for Boolean","synthetic":false,"types":[]},{"text":"impl Clone for Unit","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Alphabet, S:&nbsp;Clone + DFAStorage&lt;A&gt;&gt; Clone for DFA&lt;A, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::State: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::State: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::State: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, S:&nbsp;Clone + Eq + Hash&gt; Clone for DefaultDFAStorage&lt;A, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Alphabet, S:&nbsp;Clone + DFAStorage&lt;A&gt;&gt; Clone for DFABuilder&lt;A, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::State: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::State: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::State: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;Sym:&nbsp;Clone + Step&gt; Clone for Range&lt;Sym&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()