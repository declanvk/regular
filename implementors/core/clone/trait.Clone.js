(function() {var implementors = {};
implementors["regular"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"regular/alphabet/struct.Boolean.html\" title=\"struct regular::alphabet::Boolean\">Boolean</a>","synthetic":false,"types":["regular::alphabet::Boolean"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"regular/alphabet/struct.Unit.html\" title=\"struct regular::alphabet::Unit\">Unit</a>","synthetic":false,"types":["regular::alphabet::Unit"]},{"text":"impl&lt;A:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"regular/alphabet/trait.Alphabet.html\" title=\"trait regular::alphabet::Alphabet\">Alphabet</a>, S:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"regular/prelude/trait.DFAStorage.html\" title=\"trait regular::prelude::DFAStorage\">DFAStorage</a>&lt;A&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"regular/prelude/struct.DFA.html\" title=\"struct regular::prelude::DFA\">DFA</a>&lt;A, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"regular/prelude/trait.DFAStorage.html#associatedtype.State\" title=\"type regular::prelude::DFAStorage::State\">State</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"regular/prelude/trait.DFAStorage.html#associatedtype.State\" title=\"type regular::prelude::DFAStorage::State\">State</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"regular/prelude/trait.DFAStorage.html#associatedtype.State\" title=\"type regular::prelude::DFAStorage::State\">State</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,&nbsp;</span>","synthetic":false,"types":["regular::dfa::DFA"]},{"text":"impl&lt;A:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, S:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"regular/prelude/struct.DefaultDFAStorage.html\" title=\"struct regular::prelude::DefaultDFAStorage\">DefaultDFAStorage</a>&lt;A, S&gt;","synthetic":false,"types":["regular::dfa::DefaultDFAStorage"]},{"text":"impl&lt;A:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"regular/alphabet/trait.Alphabet.html\" title=\"trait regular::alphabet::Alphabet\">Alphabet</a>, S:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"regular/prelude/trait.DFAStorage.html\" title=\"trait regular::prelude::DFAStorage\">DFAStorage</a>&lt;A&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"regular/prelude/struct.DFABuilder.html\" title=\"struct regular::prelude::DFABuilder\">DFABuilder</a>&lt;A, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"regular/prelude/trait.DFAStorage.html#associatedtype.State\" title=\"type regular::prelude::DFAStorage::State\">State</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"regular/prelude/trait.DFAStorage.html#associatedtype.State\" title=\"type regular::prelude::DFAStorage::State\">State</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::<a class=\"type\" href=\"regular/prelude/trait.DFAStorage.html#associatedtype.State\" title=\"type regular::prelude::DFAStorage::State\">State</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,&nbsp;</span>","synthetic":false,"types":["regular::dfa::DFABuilder"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"regular/prelude/enum.Error.html\" title=\"enum regular::prelude::Error\">Error</a>","synthetic":false,"types":["regular::error::Error"]},{"text":"impl&lt;Sym:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Step&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"regular/enum.Range.html\" title=\"enum regular::Range\">Range</a>&lt;Sym&gt;","synthetic":false,"types":["regular::util::step::Range"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()